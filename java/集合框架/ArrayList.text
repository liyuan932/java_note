ArrayList持有1个Object数组elementData，对ArrayList的操作实际上是对这个数组的操作。

容量capacity
等价于elementData.length。

扩容算法
new ArrayList()时，容量为0；当使用add方法添加元素，会进行动态扩容，如果容量小于DEFAULT_CAPACITY，扩容至DEFAULT_CAPACITY；否则在超出容量时在原容量上扩容1/2。
例：第1次add时，容量为默认值10；第11次add时，容量为15；依此类推。


容量动态增长的原理
elementData = Arrays.copyOf(elementData, newCapacity);


添加大量数据的性能问题
默认容量为10，当add大量数据时，会频繁进行扩容，即数组复制，影响效率的同时很容易导致内存不足而gc。
解决办法：
使用设置初始容量的构造方法；
public ArrayList(int initialCapacity)
 

容量与size
容量是数组elementData的长度，size是数组elementData中有效元素的个数


插入元素和删除元素的核心实现
插入：public void add(int index, E element) 插入位置及后面的元素右移
    System.arraycopy(elementData, index, elementData, index + 1,size - index);
    elementData[index] = element;
    size++;
删除：public E remove(int index) 删除位置后面的元素左移
    System.arraycopy(elementData, index+1, elementData, index,size - index - 1);
    elementData[--size] = null


ArrayList与Array的转换
ArrayList转Array
Object[] ArrayList.toArray()
T[] ArrayList.toArray(T[] a) 通常传个空数组就可以了
T[] ArrayList.toArray(Class<T> clz)  可实现
    Arrays.copyOf(elementData, size, clz)
Array转ArrayList
ArrayList并没有一个传数组的构造方法，这点需要改进~~
Arrays.asList(T... a) 可把数组转换成ArrayList，但此ArrayList只是Arrays类的内部类，而并非java.util.ArrayList,折衷方法：
new ArrayList(Arrays.asList(T... a))


求集合的并集、交集、补集
boolean addAll(Collection<? extends E> c) 并集
boolean removeAll(Collection<?> c) 补集
boolean retainAll(Collection<?> c) 交集
removeAll和retainAll使用相同的算法batchRemove,基本原理都是：
把需要保留的往前挪，然后删除不要的。


ArarayList遍历方式以及效率比较
fori 效率最高
iterator 其次 
foreach iterator的简化形式 最低
参考：
Java接口RandomAccess 
http://blog.csdn.net/ochangwen/article/details/51056655
ArarayList遍历方式以及效率比较
http://www.cnblogs.com/aoguren/p/4771589.html
解惑：
RandomAccess接口只是一个标记接口，标记一个集合为可随机访问列表,之所以说实际了RandomAccess的接口接口fori比iterator快，是因为iterator的实现通常需要更多的开销。如：
ArrayList的iterator的内部实现实际上也是ArrayList.get(i),之所以慢，是因为需要不断的记录cursor和lastRet带来的开销，实测也慢不了多少。

ArrayList遍历过程中的元素删除问题
问题：使用fori遍历删除元素时，会报IndexOutOfBoundsException异常
原因：ArrayList删除元素后,size会减1，而循环次数仍然为size
解决方案：使用iterator遍历删除元素或使用removeIf方法

subList子列表
List<E> subList(int fromIndex, int toIndex)
subList方法实际返回一个ArrayList.SubList类的实例。SubList持有原有的ArrayList,并通过offset+index来访问元素。


foreach方法
public void forEach(Consumer<? super E> action)
重载自Iteratable接口的default方法，使用fori遍历元素并对可对元素进行操作，遍历过程中有其它线程对集合进行修改报ConcurrentModificationException异常。

removeIf方法
public boolean removeIf(Predicate<? super E> filter)
重载Collection接口的default方法，基本思路是把不需要删除的元素左移，然后清空多余的元素，操作过程中其它线程对集合进行修改报ConcurrentModificationException异常。

sort方法
public void sort(Comparator<? super E> c) 
重载List接口的default方法，实现原理为：
Arrays.sort((E[]) elementData, 0, size, c)

ArrayList与Vector的区别
相同点：
Vector和ArrayList都是基于储存元素的Object[] array来实现的，是根据索引来访问元素。
不同点：
1）同步性
   Vector的方法大部分是同步的,是线程安全的；而ArrayList的方法不是同步的。
   由于线程的同步必然要影响性能，Vector开销就比较大，这样就造成ArrayList比Vector更快些，不过在最新的JVM中，这两个类的速度差别是很小的，几乎可以忽略不计。正常情况下,大多数的Java程序员使用ArrayList而不是Vector,因为同步完全可以由程序员自己来控制。
2）数据增长：
   当集合中的元素超过它的初始大小时,Vector会将它的容量翻倍,而ArrayList只增加50%的大小；
   ArrayList就有利于节约内存空间。
